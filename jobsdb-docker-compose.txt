# docker-compose.yml - Complete JobsDB HK deployment stack

version: '3.10'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jobsdb-postgres
    environment:
      POSTGRES_DB: jobsdb
      POSTGRES_USER: jobsdb_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jobsdb_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jobsdb_user -d jobsdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jobsdb-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jobsdb-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://jobsdb_user:${DB_PASSWORD:-jobsdb_pass}@postgres:5432/jobsdb
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379
      API_KEY: ${API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
    volumes:
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Scraper Service (runs scheduled jobs)
  scraper:
    build:
      context: .
      dockerfile: Dockerfile.scraper
    container_name: jobsdb-scraper
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://jobsdb_user:${DB_PASSWORD:-jobsdb_pass}@postgres:5432/jobsdb
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
    volumes:
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    # Required for Puppeteer
    cap_add:
      - SYS_ADMIN

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jobsdb-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped

  # Frontend (if using separate frontend)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: jobsdb-frontend
    environment:
      REACT_APP_API_URL: ${API_URL:-http://localhost:3000}
      REACT_APP_API_KEY: ${FRONTEND_API_KEY}
    ports:
      - "3001:80"
    depends_on:
      - api
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: jobsdb-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: jobsdb-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: jobsdb-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-jobsdb_pass}
    volumes:
      - ./backups:/backups
    entrypoint: |
      sh -c 'while true; do
        pg_dump -h postgres -U jobsdb_user -d jobsdb > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name "backup_*.sql" -mtime +7 -delete
        sleep 86400
      done'
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: jobsdb-network

# Additional configuration files needed:

# Dockerfile (for API service)
# FROM node:18-alpine
# WORKDIR /app
# COPY package*.json ./
# RUN npm ci --only=production
# COPY . .
# EXPOSE 3000
# CMD ["node", "jobsdb-api-service.js"]

# Dockerfile.scraper (for scraper with Puppeteer)
# FROM node:18-alpine
# 
# # Install Chromium
# RUN apk add --no-cache \
#   chromium \
#   nss \
#   freetype \
#   freetype-dev \
#   harfbuzz \
#   ca-certificates \
#   ttf-freefont
# 
# # Tell Puppeteer to skip installing Chrome
# ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
#     PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
# 
# WORKDIR /app
# COPY package*.json ./
# RUN npm ci --only=production
# COPY . .
# 
# # Add user so we don't need --no-sandbox
# RUN addgroup -g 1001 -S pptruser && adduser -u 1001 -S pptruser -G pptruser
# USER pptruser
# 
# CMD ["node", "scraper-daemon.js"]

# nginx.conf
# events {
#   worker_connections 1024;
# }
# 
# http {
#   upstream api {
#     server api:3000;
#   }
# 
#   server {
#     listen 80;
#     server_name your-domain.com;
# 
#     location /api {
#       proxy_pass http://api;
#       proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#       proxy_set_header Connection 'upgrade';
#       proxy_set_header Host $host;
#       proxy_cache_bypass $http_upgrade;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;
#     }
# 
#     location / {
#       proxy_pass http://frontend:80;
#       proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#       proxy_set_header Connection 'upgrade';
#       proxy_set_header Host $host;
#       proxy_cache_bypass $http_upgrade;
#     }
#   }
# }